{"version":3,"sources":["components/Photos.js","components/Albums.js","App.js","serviceWorker.js","index.js"],"names":["Photos","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","photos","inherits","createClass","key","value","_this2","axios","get","props","albumId","then","res","setState","data","map","photo","react_default","a","createElement","className","id","src","url","alt","style","imgStyle","title","Component","width","Albums","albums","console","log","album","Fragment","userId","components_Photos","App","components_Albums","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b01e6f63.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport \"../App.css\";\n\n\nexport class Photos extends Component {\n\n    state={\n        photos:[],\n        \n    }\n\n    componentDidMount(){\n       \n        axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=${this.props.albumId}`)\n        .then(res=>\n            {this.setState({photos:res.data});\n            //console.log(this.state.photos);\n        })\n        \n      }\n\n  render() {\n\n    return this.state.photos.map((photo)=>(\n        <div className=\"column\">\n        <div key={photo.id} >\n        <img src={photo.url} alt=\"\" style={imgStyle}/>\n        <p>{photo.title}</p> \n        <p>id: {photo.id}</p>\n        </div>\n        </div>\n    ));\n   \n   \n  }\n}\n\nconst imgStyle={\n    width:\"10%\"\n};\n\nexport default Photos;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Photos from './Photos';\nimport HorizontalScroll from 'react-scroll-horizontal';\n\n\nexport class Albums extends Component {\n\n    state={\n        albums:[]\n    }\n\n    componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/albums')\n        .then(res=>\n            {this.setState({albums:res.data});\n            console.log(this.state.albums);\n            /*console.log(this.state.albums[0].id);\n            console.log(this.state.albums[0].title);\n            console.log(this.state.albums[0].userId);*/\n        })\n      }\n\n  render() {\n\n    return this.state.albums.map((album)=>(\n        <>\n        <div key={album.id}>\n        <h3 className=\"text-left\">{album.title}</h3>\n        <p className=\"text-left\">id :{album.id}, userId: {album.userId}</p>\n        <hr/>\n        <div className=\"row\">\n        \n        <Photos albumId={album.id}/>\n        \n        </div>\n        </div>\n        </>\n    ));\n    \n  }\n}\n\nexport default Albums;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Albums from './components/Albums';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Albums/>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}